# Default values for janus-cloud.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  janusCloud:
    repository: saverops/janus-cloud
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  janusGateway:
    repository: saverops/janus-gateway
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.10.7"

imagePullSecrets: []
nameOverride:
  janusProxy: "janus-proxy"
  janusGateway: "janus-gateway"
fullnameOverride:
  janusProxy: ""
  janusGateway: ""

serviceAccount:
  janusProxy:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  janusGateway:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 8288

ingress:
  enabled: true
  className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: localhost
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # janusProxy:
  #   limits:
  #     cpu: 100m
  #     memory: 128Mi
  #   requests:
  #     cpu: 100m
  #     memory: 128Mi
  # janusGateway:
  #   limits:
  #     cpu: 100m
  #     memory: 128Mi
  #   requests:
  #     cpu: 100m
  #     memory: 128Mi
  # janusSentinel:
  #   limits:
  #     cpu: 100m
  #     memory: 128Mi
  #   requests:
  #     cpu: 100m
  #     memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# SubChart
coturn:
  enabled: true

config:
  janus: |
    general: {
      configs_folder = "/opt/janus/etc/janus"
      plugins_folder = "/opt/janus/lib/janus/plugins"
      transports_folder = "/opt/janus/lib/janus/transports"
      events_folder = "/opt/janus/lib/janus/events"
      loggers_folder = "/opt/janus/lib/janus/loggers"
      debug_level = 4
      admin_secret = "janusoverlord"
      protected_folders = [
        "/bin",
        "/boot",
        "/dev",
        "/etc",
        "/initrd",
        "/lib",
        "/lib32",
        "/lib64",
        "/proc",
        "/sbin",
        "/sys",
        "/usr",
        "/var",
        "/opt/janus/bin",
        "/opt/janus/etc",
        "/opt/janus/include",
        "/opt/janus/lib",
        "/opt/janus/lib32",
        "/opt/janus/lib64",
        "/opt/janus/sbin"
      ]
    }
    nat: {
      stun_server = "{{ .Release.Name }}-coturn"
      stun_port = 3478
      nice_debug = false
      turn_server = "{{ .Release.Name }}-coturn"
      stun_port = 3478
      turn_user = "user"
      turn_pwd = "password"
      ice_ignore_list = "vmnet"
    }
    plugins: {}
    transports: {
      disable = "libjanus_http.so,libjanus_pfunix.so"
    }
    loggers: {}
    events: {}
  janusTransport:
    websockets: |
      general: {
        json = "indented"
        ws = true
        ws_port = 8188
        wss = false
      }
      admin: {
        admin_ws = false
        admin_ws_port = 7188
        admin_wss = false
      }
      certificates: {}
  janusPlugin:
    audiobridge: |
      general: {}
      room-1234: {
        description = "Demo Room"
        secret = "adminpwd"
        sampling_rate = 16000
        record = false
      }
    echotest: |
      general: {}
    nosip: |
      general: {
        rtp_port_range = "20000-40000"
      }
    recordplay: |
      general: {}
    sip: |
      general: {
        keepalive_interval = 120
        behind_nat = false
        register_ttl = 3600
        rtp_port_range = "20000-40000"
      }
    streaming: |
      general: {}
      rtp-sample: {
        type = "rtp"
        id = 1
        description = "Opus/VP8 live stream coming from external source"
        metadata = "You can use this metadata section to put any info you want!"
        audio = true
        video = true
        audioport = 5002
        audiopt = 111
        audiortpmap = "opus/48000/2"
        videoport = 5004
        videopt = 100
        videortpmap = "VP8/90000"
        secret = "adminpwd"
      }
      file-live-sample: {
        type = "live"
        id = 2
        description = "a-law file source (radio broadcast)"
        filename = "/opt/janus/share/janus/streams/radio.alaw"
        audio = true
        video = false
        secret = "adminpwd"
      }
      file-ondemand-sample: {
        type = "ondemand"
        id = 3
        description = "mu-law file source (music)"
        filename = "/opt/janus/share/janus/streams/music.mulaw"
        audio = true
        video = false
        secret = "adminpwd"
      }
    textroom: |
      general: {
        json = "indented"
      }
      room-1234: {
        description = "Demo Room"
        secret = "adminpwd"
      }
    videocall: |
      general: {}
    videoroom: |
      general: {}
      room-1234: {
        description = "Demo Room"
        secret = "adminpwd"
        publishers = 6
        bitrate = 128000
        fir_freq = 10
        record = false
      }
      room-5678: {
        description = "VP9-SVC Demo Room"
        secret = "adminpwd"
        publishers = 6
        bitrate = 512000
        fir_freq = 10
        videocodec = "vp9"
        video_svc = true
      }
    voicemail: |
      general: {}
  janusEventhandler:
    gelfevh: |
      general: {
        enabled = false
        events = "all"
        backend = "your.graylog.server"
        port = "12201"
        protocol = "tcp"
        max_message_len = 1024
      }
    sampleevh: |
      general: {
        enabled = false
        events = "all"
        grouping = true
        json = "indented"
        backend = "http://your.webserver.here/and/a/path"
      }
    wsevh: |
      general: {
        enabled = false
        events = "all"
        grouping = true
        json = "indented"
        backend = "ws://your.websocket.here"
      }
  janusSentinel: |
    general:
      daemonize: false
    janus:
      server_ip: "127.0.0.1"
      ws_port: 8188
      admin_ws_port: 0
      pingpong_interval: 5
      statistic_interval: 10
      request_timeout: 10
      hwm_threshold: 1
      admin_secret: ""
    proc_watcher:
      cmdline: ""
      error_restart_interval: 10
      poll_interval: 1
    log:
      log_to_stdout: true
      debug_level: "DEBUG"
      log_file_size: 10485760
      log_file_rotate: 10
    admin_api:
      json: "indented"
      http_listen: "0.0.0.0:8200"
    posters:
      - post_type: "http"
        name: ""
        post_urls: ["http://janus-cloud-janus-proxy:8100/sentinel_callback"]
        expire: 60
        http_timeout: 10
  janusProxy: |
    # General configuration. for some basic configuration
    general:
      daemonize:
        false # Whether Janus-proxy should run as a daemon
        # or not (default=run in foreground)
      # configs_folder: "/etc/janus-cloud"    # Configuration files folder for plugins, default is the same
      # with the folder containing this config file
      server_name:
        "" # IP address or hostname of this Janus proxy,
        # it will appear in an info request, and is used for addressing among proxies.
        # Default is empty, means this Janus proxy has no hostname
      session_timeout:
        60 # How long (in seconds) we should wait before
        # deciding a Janus session has timed out. A
        # session times out when no request is received
        # for session_timeout seconds (default=60s).
        # Setting this to 0 will disable the timeout
        # mechanism, which is NOT suggested as it may
        # risk having orphaned sessions (sessions not
        # controlled by any transport and never freed).
        # To avoid timeouts, keep-alives can be used.
      server_db:
        "memory" # the url of the database storing the backend Janus server info.
        # Now only support memory or redis type.
        # the url for memory db is: "memory",
        # the url for redis is according to
        # <https://www.iana.org/assignments/uri-schemes/prov/redis>, for example:
        #      "redis://user:secret@localhost:6379/0" schema. default is memory
      server_select:
        "rr" # select algorithm for backend Janus server, now support "rr" (round robin),
        # "rand" (random), "lb" (load balance), "wr"(weighted random) and the
        # thirdparty method.
        # for the thirdparty method, it can be given in form "module_name:method_name".
        # default is "rr".

      api_secret:
        "" # String that all API requests must contain to be accepted/authorized by
        # the Janus-proxy. Useful if you're wrapping all Janus API requests in your
        # servers (that is, not in the browser, where you do the things your way) and you
        # don't want other application to mess with this Janus-proxy instance.
        # Furthermore, this api_secret is also included in all the requests to the backend
        # Janus server. Default is empty
    log:
      log_to_stdout:
        true # Whether the Janus output should be written
        # to stdout or not (default=true)
      debug_level:
        "DEBUG" # Debug/logging level, valid values are
        # DEBUG/INFO/WARN/ERROR/FATAL, default is DEBUG

      log_file_size: 104857600 # max size for one log file, default is 100M
      log_file_rotate: 10 # rotate number for log file, default is 10

    # Certificate and key to use for WSS and HTTPS (and passphrase if needed).
    certificates:
      cert_pem: "/opt/janus-cloud/certs/mycert.pem"
      cert_key: "/opt/janus-cloud/certs/mycert.key"

    # You can choose which of the available plugins should be
    # enabled or not. the item in this list is with the format below,
    # plugin_module_path(e.g. januscloud.plugins.echotest):plugin_fatory_name
    plugins:
      - januscloud.proxy.plugin.dummytest:DummyTestPlugin
      - januscloud.proxy.plugin.echotest:EchoTestPlugin
      - januscloud.proxy.plugin.videocall:VideoCallPlugin
      - januscloud.proxy.plugin.p2pcall:P2PCallPlugin
      - januscloud.proxy.plugin.videoroom:VideoRoomPlugin

    # Configuration for the websocket transport.
    # Websocket transport module outputs the Janus api on websocket protocol just as Janus server
    ws_transport:
      json:
        "indented" # Whether the JSON messages should be indented (default),
        # plain (no indentation) or compact (no indentation and no spaces)
      #pingpong_trigger: 30             # After how many seconds of idle, a PING should be sent, 0 means no ping would be
      # sent
      #pingpong_timeout: 10             # After how many seconds of not getting a PONG, a timeout should be detected

      ws: true # Whether to enable the WebSockets API
      ws_listen: "0.0.0.0:8288" # WebSockets server listen addr

      wss: false # Whether to enable secure WebSockets
      wss_listen: "0.0.0.0:8289" # WebSockets server secure listen addr, if enabled

      max_greenlet_num: 1024 # size of the greenlet pool for this transport, 0 means not limited

    # Configuration about the RESTful api of janus-proxy. janus-proxy provide an other set of RESTful API for admin
    admin_api:
      json:
        "indented" # Whether the JSON messages should be indented (default),
        # plain (no indentation) or compact (no indentation and no spaces)
      http_listen: "0.0.0.0:8100" # REST API server listen addr

    # static configured backend Janus-gateway server besides the ones auto-registered by janus-sentinel
    # janus_server:
    #   - {
    #       name: "server1",
    #       url: "ws://127.0.0.1:8188",
    #       status: 0,
    #       session_timeout: 60,
    #     }
  janusProxyPlugin:
    p2pcall: |
      general:
        user_db: memory # "memory" is only supported
    videocall: |
      general:
        user_db: memory # "memory" or "redis://user:secret@localhost:6379/0"
    videoroom: |
      general:
        room_db: memory # "memory" or "redis://user:secret@localhost:6379/0"
        room_auto_destroy_timeout: 0 # if not zero, the idle room would be destroyed automatically
        admin_key: ''
        lock_rtp_forward: false
      backend_sweeper:
        enable: true
        backend_idle_room_check_interval: 600
      rooms:
        - room_id: 1234
          description: Demo Room
          secret: adminpwd
          publishers: 6
          bitrate: 128000
          fir_freq: 10
          videocodec: vp8
          record: false
